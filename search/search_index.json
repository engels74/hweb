{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>This is a fork of hotio's official website. It's main purpose is to show the few amounts of containers, that I forked myself off of hotio's deprecated projects. It's mainly for personal use, but I made the website available for documentation, for anyone who might stumble upon the forked containers.</p> <p>Most images come with docker cli or compose examples. </p> <p>If you've got any questions, feel free to create an issue on the GitHub repository for the specific container you need help with.</p>"},{"location":"#donations","title":"Donations","text":"<p>Show some (monetary) love for hotio - he definitely deserves it! </p> <p> GitHub Sponsors  Open Collective  Bitcoin</p>"},{"location":"#affiliate-links","title":"Affiliate Links","text":"<p>If you need a VPN, you can use hotio's affiliate links:</p> <p> </p>"},{"location":"#support","title":"Support","text":"<p>For support, please create an issue on the GitHub repository for the specific container you need help with.</p>"},{"location":"faq/","title":"Faq","text":"I'm here if you need me..."},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":"Someone asked you for a 'docker-compose' snippet...How do you give them that? <p>If you are not using <code>docker-compose</code>, that can sound like a daunting task. Have no fear though, the following cli command spits it out.</p> <pre><code>docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro ghcr.io/red5d/docker-autocompose &lt;container-name-or-id&gt; [&lt;additional-names-or-ids&gt;]\n</code></pre> <p>Now you should upload this to logs.notifiarr.com after removing personal details and passwords.</p>"},{"location":"faq/#installation","title":"Installation","text":"Installing Docker, how and where? <p>I'd have a look at the official Docker Engine installation instructions.</p>"},{"location":"faq/#guides","title":"Guides","text":"I would like to execute my own scripts on startup, how would I do this? <p>This will only work for containers using <code>s6 overlay</code>, recognisable by <code>ENVIRONMENT</code> printed at the top of the log when the container starts.</p> <p>If you have a need to do additional stuff when the container starts or stops, you can mount your script with the volume <code>/docker/host/my-script.sh:/etc/cont-init.d/99-my-script</code> to execute your script on container start or <code>/docker/host/my-script.sh:/etc/cont-finish.d/99-my-script</code> to execute it when the container stops. An example script can be seen below.</p> <pre><code>#!/command/with-contenv bash\necho \"Hello, this is me, your script.\"\n</code></pre> How can I get a static IP for one of my containers using 'docker-compose'? <p>Here's a basic docker-compose example that sets up a custom network and gives the plex container a static IP.</p> <pre><code>version: \"3.7\"\n\nnetworks:\n  my-custom-network:\n    name: my-custom-network\n    driver: bridge\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.1.0.0/24\n\nservices:\n  plex:\n    container_name: plex\n    image: hotio/plex\n    ports:\n      - \"32400:32400\"\n    networks:\n      my-custom-network:\n        ipv4_address: 10.1.0.100\n    ...\n\n  radarr:\n    container_name: radarr\n    image: hotio/radarr\n    ports:\n      - \"7878:7878\"\n    networks:\n      - my-custom-network\n    ...\n</code></pre> How do I route a container's traffic through a VPN container? <p>Small docker-compose example below. Notice the <code>...</code>, this isn't a copy/paste ready to go example.</p> <pre><code>version: \"3.7\"\n\nservices:\n  qbittorrent:\n    container_name: qbittorrent\n    image: hotio/qbittorrent\n    ports:\n      - \"8080:8080\"\n      - \"9117:9117\"\n    environment:\n      ...\n      - VPN_EXPOSE_PORTS_ON_LAN=9117/tcp,9117/udp\n    ...\n\n  jackett:\n    container_name: jackett\n    image: hotio/jackett\n    network_mode: \"service:qbittorrent\"\n    ...\n</code></pre> Got any Docker guides? <p>Take a look here for an extensive guide on best practises from the *arr team.</p> But, but, how do I configure all this stuff? <p>Maybe TRaSH from TRaSH Guides can help...</p>"},{"location":"containers/base-image/","title":"engels74/base-image","text":"<p> GitHub ghcr.io</p> <p>What is this?</p> <p>This is a fork of Hotio's Docker image. It's used for my other Docker images. It's basically the same as Hotio's except that it's tailored to my containers.</p>"},{"location":"containers/base-image/#starting-the-container","title":"Starting the container","text":"clicompose <pre><code>docker run --rm \\\n    --name base-image \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=002 \\\n    -e TZ=\"Etc/UTC\" \\\n    -v /&lt;host_folder_config&gt;:/config \\\n    ghcr.io/engels74/base-image:alpinevpn\n</code></pre> <pre><code>services:\n  base-image:\n    container_name: base-image\n    image: ghcr.io/engels74/base-image:alpinevpn\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Etc/UTC\n    volumes:\n      - /&lt;host_folder_config&gt;:/config\n</code></pre> <p>This image is the base-image image for all other application images, however it can be used as a standalone VPN image for other images to attach to.</p>"},{"location":"containers/base-image/#tags","title":"Tags","text":"Tags Description Last Updated Age"},{"location":"containers/base-image/#wireguard","title":"WireGuard","text":"<p>Info</p> <p>This image includes VPN support. The cli/compose examples below are environment variables and settings complementary to the app image examples, this means you'll have to add/merge the stuff below with the stuff above. In case you are still in need of a VPN, consider using my affiliate links for Proton VPN, Proton Mail, Proton Drive, Proton Pass or Private Internet Access.</p> <p> </p> genericprotonpia clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"generic\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"false\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=generic #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=false #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"proton\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=proton #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"pia\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e VPN_PIA_USER=\"\" \\ #(11)\n    -e VPN_PIA_PASS=\"\" \\ #(11)\n    -e VPN_PIA_PREFERRED_REGION=\"\" \\ #(7)\n    -e VPN_PIA_DIP_TOKEN=\"no\" \\ #(13)\n    -e VPN_PIA_PORT_FORWARD_PERSIST=\"false\" \\ #(14)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=pia #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - VPN_PIA_USER #(11)\n      - VPN_PIA_PASS #(11)\n      - VPN_PIA_PREFERRED_REGION #(7)\n      - VPN_PIA_DIP_TOKEN=no #(13)\n      - VPN_PIA_PORT_FORWARD_PERSIST=false #(14)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol>"},{"location":"containers/caddy/","title":"engels74/caddy","text":"<p> GitHub ghcr.io</p> <p>What is this?</p> <p>A Docker image with Caddy 2 including DNS modules for Cloudflare, Njalla, and rate limiting. The default configuration restricts access to private IP ranges only.</p> <p>Note: The Njalla DNS module uses a custom build pending the merge of this upstream PR. </p>"},{"location":"containers/caddy/#starting-the-container","title":"Starting the container","text":"clicompose <pre><code>docker run --rm \\\n    --name caddy \\\n    -p 80:8080 \\\n    -p 443:8443 \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=002 \\\n    -e TZ=\"Etc/UTC\" \\\n    -e CUSTOM_BUILD=\"\" \\\n    -v /&lt;host_folder_config&gt;:/config \\\n    ghcr.io/engels74/caddy\n</code></pre> <pre><code>services:\n  caddy:\n    container_name: caddy\n    image: ghcr.io/engels74/caddy\n    ports:\n      - \"80:8080\"\n      - \"443:8443\"\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Etc/UTC\n      - CUSTOM_BUILD\n    volumes:\n      - /&lt;host_folder_config&gt;:/config\n</code></pre>"},{"location":"containers/caddy/#tags","title":"Tags","text":"Tags Description Last Updated Age"},{"location":"containers/caddy/#custom-build","title":"Custom build","text":"<p>If you set the environment variable <code>CUSTOM_BUILD</code> to a file location like for example <code>/config/caddy_linux_amd64_custom</code>, an attempt is made to start Caddy with that binary. The custom build can be obtained from the Caddy download page. This is particularly useful if you need extra modules.</p>"},{"location":"containers/caddy/#wireguard","title":"WireGuard","text":"<p>Info</p> <p>This image includes VPN support. The cli/compose examples below are environment variables and settings complementary to the app image examples, this means you'll have to add/merge the stuff below with the stuff above. In case you are still in need of a VPN, consider using my affiliate links for Proton VPN, Proton Mail, Proton Drive, Proton Pass or Private Internet Access.</p> <p> </p> genericprotonpia clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"generic\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"false\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=generic #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=false #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"proton\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=proton #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"pia\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e VPN_PIA_USER=\"\" \\ #(11)\n    -e VPN_PIA_PASS=\"\" \\ #(11)\n    -e VPN_PIA_PREFERRED_REGION=\"\" \\ #(7)\n    -e VPN_PIA_DIP_TOKEN=\"no\" \\ #(13)\n    -e VPN_PIA_PORT_FORWARD_PERSIST=\"false\" \\ #(14)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=pia #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - VPN_PIA_USER #(11)\n      - VPN_PIA_PASS #(11)\n      - VPN_PIA_PREFERRED_REGION #(7)\n      - VPN_PIA_DIP_TOKEN=no #(13)\n      - VPN_PIA_PORT_FORWARD_PERSIST=false #(14)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol>"},{"location":"containers/overseerr-anime/","title":"engels74/overseerr-anime","text":"<p> GitHub ghcr.io</p> <p>What is this?</p> <p>This is a fork of Hotio's overseerr Docker image, that includes the Anime Instance PR (#3664).</p> <p>It's built using this fork of the PR.</p> <p>Branches and Tags</p> <p>This project maintains two branches, each with its own Docker tag:</p> <ul> <li><code>:release</code> (or <code>:latest</code>):   Based on the <code>feature-default-anime-instance-checkbox-release</code> branch.   This is the stable version, rebased from the <code>sct/overseerr</code> repository's <code>master</code> branch (official releases) with the anime instance support changes applied.</li> </ul> Why is this needed? <p>This was made since Overseerr maintainers are very busy, and it probably won't get merged in the near future.</p>"},{"location":"containers/overseerr-anime/#starting-the-container","title":"Starting the container","text":"clicompose <pre><code>docker run --rm \\\n    --name overseerr-anime \\\n    -p 5055:5055 \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=002 \\\n    -e TZ=\"Etc/UTC\" \\\n    -e WEBUI_PORTS=\"5055/tcp,5055/udp\" \\\n    -v /&lt;host_folder_config&gt;:/config \\\n    ghcr.io/engels74/overseerr-anime\n</code></pre> <pre><code>services:\n  overseerr-anime:\n    container_name: overseerr-anime\n    image: ghcr.io/engels74/overseerr-anime\n    ports:\n      - \"5055:5055\"\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Etc/UTC\n      - WEBUI_PORTS=5055/tcp,5055/udp\n    volumes:\n      - /&lt;host_folder_config&gt;:/config\n</code></pre>"},{"location":"containers/overseerr-anime/#tags","title":"Tags","text":"Tags Description Last Updated Age"},{"location":"containers/overseerr-anime/#wireguard","title":"WireGuard","text":"<p>Info</p> <p>This image includes VPN support. The cli/compose examples below are environment variables and settings complementary to the app image examples, this means you'll have to add/merge the stuff below with the stuff above. In case you are still in need of a VPN, consider using my affiliate links for Proton VPN, Proton Mail, Proton Drive, Proton Pass or Private Internet Access.</p> <p> </p> genericprotonpia clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"generic\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"false\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=generic #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=false #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"proton\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=proton #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"pia\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e VPN_PIA_USER=\"\" \\ #(11)\n    -e VPN_PIA_PASS=\"\" \\ #(11)\n    -e VPN_PIA_PREFERRED_REGION=\"\" \\ #(7)\n    -e VPN_PIA_DIP_TOKEN=\"no\" \\ #(13)\n    -e VPN_PIA_PORT_FORWARD_PERSIST=\"false\" \\ #(14)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=pia #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - VPN_PIA_USER #(11)\n      - VPN_PIA_PASS #(11)\n      - VPN_PIA_PREFERRED_REGION #(7)\n      - VPN_PIA_DIP_TOKEN=no #(13)\n      - VPN_PIA_PORT_FORWARD_PERSIST=false #(14)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol>"},{"location":"containers/qbittorrent/","title":"engels74/qbittorrent","text":"<p> GitHub ghcr.io</p> <p>What is this?</p> <p>This is a fork of Hotio's qBittorrent Docker image, that uses libtorrent v2.x by default.</p> <p>Hotio recently added the option to define by ENV if you want to use libtorrent v1 or v2. This one uses <code>v2</code> by default.</p> <p>This also still includes VueTorrent in the image.</p>"},{"location":"containers/qbittorrent/#starting-the-container","title":"Starting the container","text":"clicompose <pre><code>docker run --rm \\\n    --name qbittorrent \\\n    -p 8080:8080 \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=002 \\\n    -e TZ=\"Etc/UTC\" \\\n    -e WEBUI_PORTS=\"8080/tcp,8080/udp\" \\\n    -e LIBTORRENT=\"v2\" \\\n    -v /&lt;host_folder_config&gt;:/config \\\n    -v /&lt;host_folder_data&gt;:/data \\\n    ghcr.io/engels74/qbittorrent\n</code></pre> <pre><code>services:\n  qbittorrent:\n    container_name: qbittorrent\n    image: ghcr.io/engels74/qbittorrent\n    ports:\n      - \"8080:8080\"\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Etc/UTC\n      - WEBUI_PORTS=8080/tcp,8080/udp\n      - LIBTORRENT=v2\n    volumes:\n      - /&lt;host_folder_config&gt;:/config\n      - /&lt;host_folder_data&gt;:/data\n</code></pre>"},{"location":"containers/qbittorrent/#tags","title":"Tags","text":"Tags Description Last Updated Age"},{"location":"containers/qbittorrent/#alternative-web-ui","title":"Alternative Web UI","text":"<p>This image comes bundled with the alternative Web UI VueTorrent (<code>/app/vuetorrent</code>). Nightwalker is removed, as it is no longer maintained.</p>"},{"location":"containers/qbittorrent/#wireguard","title":"WireGuard","text":"<p>Info</p> <p>This image includes VPN support. The cli/compose examples below are environment variables and settings complementary to the app image examples, this means you'll have to add/merge the stuff below with the stuff above. In case you are still in need of a VPN, consider using my affiliate links for Proton VPN, Proton Mail, Proton Drive, Proton Pass or Private Internet Access.</p> <p> </p> genericprotonpia clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"generic\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"false\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=generic #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=false #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"proton\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=proton #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"pia\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e VPN_PIA_USER=\"\" \\ #(11)\n    -e VPN_PIA_PASS=\"\" \\ #(11)\n    -e VPN_PIA_PREFERRED_REGION=\"\" \\ #(7)\n    -e VPN_PIA_DIP_TOKEN=\"no\" \\ #(13)\n    -e VPN_PIA_PORT_FORWARD_PERSIST=\"false\" \\ #(14)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=pia #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - VPN_PIA_USER #(11)\n      - VPN_PIA_PASS #(11)\n      - VPN_PIA_PREFERRED_REGION #(7)\n      - VPN_PIA_DIP_TOKEN=no #(13)\n      - VPN_PIA_PORT_FORWARD_PERSIST=false #(14)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol>"},{"location":"containers/qflood/","title":"engels74/qflood","text":"<p> GitHub ghcr.io</p> <p>What is this?</p> <p>This is a fork of Hotio's rflood Docker image, that uses qBittorrent instead of rtorrent. The qflood image has both \"releases\" and \"nightly support\". The included qBittorrent uses libtorrent v2.x.</p> What is nightly? <p>Nightly means it updates automatically after a successful run of this workflow file. This means that whenever the official flood repository receives a push commit, this docker image should automatically be updated. All thanks to hotio's brilliant setup.</p>"},{"location":"containers/qflood/#starting-the-container","title":"Starting the container","text":"clicompose <pre><code>docker run --rm \\\n    --name qflood \\\n    -p 8080:8080 \\\n    -p 3000:3000 \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=002 \\\n    -e TZ=\"Etc/UTC\" \\\n    -e LIBTORRENT=\"v2\" \\\n    -e FLOOD_AUTH=\"true\" \\\n    -e ARGS=\"\" \\\n    -e FLOOD_ARGS=\"\" \\\n    -v /&lt;host_folder_config&gt;:/config \\\n    -v /&lt;host_folder_data&gt;:/data \\\n    ghcr.io/engels74/qflood\n</code></pre> <pre><code>services:\n  qflood:\n    container_name: qflood\n    image: ghcr.io/engels74/qflood\n    ports:\n      - \"8080:8080\"\n      - \"3000:3000\"\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Etc/UTC\n      - LIBTORRENT=v2\n      - FLOOD_AUTH=true\n      - ARGS\n      - FLOOD_ARGS\n    volumes:\n      - /&lt;host_folder_config&gt;:/config\n      - /&lt;host_folder_data&gt;:/data\n</code></pre>"},{"location":"containers/qflood/#tags","title":"Tags","text":"Tags Description Last Updated Age"},{"location":"containers/qflood/#changing-the-webui-port","title":"Changing the WebUI port","text":"<p>Under certain circumstances it's required to run the WebUI on a different internal port, you can do that by modifying the environment variable <code>WEBUI_PORTS</code> accordingly. It should be in the format <code>xxxx/tcp,xxxx/udp</code>, take a look at the default with <code>docker logs</code> (variable is printed at container start) or <code>docker inspect</code>.</p>"},{"location":"containers/qflood/#wireguard","title":"WireGuard","text":"<p>Info</p> <p>This image includes VPN support. The cli/compose examples below are environment variables and settings complementary to the app image examples, this means you'll have to add/merge the stuff below with the stuff above. In case you are still in need of a VPN, consider using my affiliate links for Proton VPN, Proton Mail, Proton Drive, Proton Pass or Private Internet Access.</p> <p> </p> genericprotonpia clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"generic\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"false\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=generic #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=false #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"proton\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=proton #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"pia\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e VPN_PIA_USER=\"\" \\ #(11)\n    -e VPN_PIA_PASS=\"\" \\ #(11)\n    -e VPN_PIA_PREFERRED_REGION=\"\" \\ #(7)\n    -e VPN_PIA_DIP_TOKEN=\"no\" \\ #(13)\n    -e VPN_PIA_PORT_FORWARD_PERSIST=\"false\" \\ #(14)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=pia #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - VPN_PIA_USER #(11)\n      - VPN_PIA_PASS #(11)\n      - VPN_PIA_PREFERRED_REGION #(7)\n      - VPN_PIA_DIP_TOKEN=no #(13)\n      - VPN_PIA_PORT_FORWARD_PERSIST=false #(14)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol>"},{"location":"containers/sabnzbd/","title":"engels74/sabnzbd","text":"<p> GitHub ghcr.io</p> <p>What is this?</p> <p>This is a fork of Hotio's SABnzbd Docker image, that includes ffprobe, at <code>/app/bin/ffprobe</code>. Useful for scripts.</p>"},{"location":"containers/sabnzbd/#starting-the-container","title":"Starting the container","text":"clicompose <pre><code>docker run --rm \\\n    --name sabnzbd \\\n    -p 8080:8080 \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=002 \\\n    -e WEBUI_PORTS=\"8080/tcp,8080/udp\" \\\n    -e ARGS=\"\" \\\n    -e TZ=\"Etc/UTC\" \\\n    -v /&lt;host_folder_config&gt;:/config \\\n    -v /&lt;host_folder_data&gt;:/data \\\n    ghcr.io/engels74/sabnzbd\n</code></pre> <pre><code>services:\n  sabnzbd:\n    container_name: sabnzbd\n    image: ghcr.io/engels74/sabnzbd\n    ports:\n      - \"8080:8080\"\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Etc/UTC\n      - WEBUI_PORTS=8080/tcp,8080/udp\n      - ARGS\n    volumes:\n      - /&lt;host_folder_config&gt;:/config\n      - /&lt;host_folder_data&gt;:/data\n</code></pre>"},{"location":"containers/sabnzbd/#tags","title":"Tags","text":"Tags Description Last Updated Age"},{"location":"containers/sabnzbd/#wireguard","title":"WireGuard","text":"<p>Info</p> <p>This image includes VPN support. The cli/compose examples below are environment variables and settings complementary to the app image examples, this means you'll have to add/merge the stuff below with the stuff above. In case you are still in need of a VPN, consider using my affiliate links for Proton VPN, Proton Mail, Proton Drive, Proton Pass or Private Internet Access.</p> <p> </p> genericprotonpia clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"generic\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"false\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=generic #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=false #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"proton\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=proton #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"pia\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e VPN_PIA_USER=\"\" \\ #(11)\n    -e VPN_PIA_PASS=\"\" \\ #(11)\n    -e VPN_PIA_PREFERRED_REGION=\"\" \\ #(7)\n    -e VPN_PIA_DIP_TOKEN=\"no\" \\ #(13)\n    -e VPN_PIA_PORT_FORWARD_PERSIST=\"false\" \\ #(14)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=pia #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - VPN_PIA_USER #(11)\n      - VPN_PIA_PASS #(11)\n      - VPN_PIA_PREFERRED_REGION #(7)\n      - VPN_PIA_DIP_TOKEN=no #(13)\n      - VPN_PIA_PORT_FORWARD_PERSIST=false #(14)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol>"},{"location":"containers/tgraph-bot/","title":"engels74/tgraph-bot","text":"<p> GitHub ghcr.io</p> <p>What is this?</p> <p>This is a Docker image for my tgraph-bot. It posts Tautulli graphs to a Discord channel of your choice, with many more features.</p>"},{"location":"containers/tgraph-bot/#starting-the-container","title":"Starting the container","text":"clicompose <pre><code>docker run --rm \\\n    --name tgraph-bot \\\n    -e PUID=1000 \\\n    -e PGID=1000 \\\n    -e UMASK=002 \\\n    -e TZ=\"Etc/UTC\" \\\n    -v /&lt;host_folder_config&gt;:/config \\\n    ghcr.io/engels74/tgraph-bot\n</code></pre> <pre><code>services:\n  tgraph-bot:\n    container_name: tgraph-bot\n    image: ghcr.io/engels74/tgraph-bot\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - UMASK=002\n      - TZ=Etc/UTC\n    volumes:\n      - /&lt;host_folder_config&gt;:/config\n</code></pre>"},{"location":"containers/tgraph-bot/#tags","title":"Tags","text":"Tags Description Last Updated Age"},{"location":"containers/tgraph-bot/#wireguard","title":"WireGuard","text":"<p>Info</p> <p>This image includes VPN support. The cli/compose examples below are environment variables and settings complementary to the app image examples, this means you'll have to add/merge the stuff below with the stuff above. In case you are still in need of a VPN, consider using my affiliate links for Proton VPN, Proton Mail, Proton Drive, Proton Pass or Private Internet Access.</p> <p> </p> genericprotonpia clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"generic\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"false\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=generic #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=false #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"proton\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=proton #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> clicompose <pre><code>docker run --rm \\\n    --hostname container-name.internal \\ #(18)\n    -e VPN_ENABLED=\"true\" \\ #(5)\n    -e VPN_CONF=\"wg0\" \\ #(8)\n    -e VPN_PROVIDER=\"pia\" \\ #(4)\n    -e VPN_LAN_NETWORK=\"192.168.1.0/24\" \\ #(1)\n    -e VPN_LAN_LEAK_ENABLED=\"false\" \\ #(10)\n    -e VPN_EXPOSE_PORTS_ON_LAN=\"\" \\ #(2)\n    -e VPN_AUTO_PORT_FORWARD=\"true\" \\ #(6)\n    -e VPN_AUTO_PORT_FORWARD_TO_PORTS=\"\" \\ #(15)\n    -e VPN_FIREWALL_TYPE=\"auto\" \\ #(17)\n    -e VPN_HEALTHCHECK_ENABLED=\"false\" \\ #(20)\n    -e VPN_NAMESERVERS=\"\" \\ #(16)\n    -e VPN_PIA_USER=\"\" \\ #(11)\n    -e VPN_PIA_PASS=\"\" \\ #(11)\n    -e VPN_PIA_PREFERRED_REGION=\"\" \\ #(7)\n    -e VPN_PIA_DIP_TOKEN=\"no\" \\ #(13)\n    -e VPN_PIA_PORT_FORWARD_PERSIST=\"false\" \\ #(14)\n    -e PRIVOXY_ENABLED=\"false\" \\ #(19)\n    -e UNBOUND_ENABLED=\"false\" \\ #(21)\n    -e UNBOUND_NAMESERVERS=\"\" \\ #(22)\n    --cap-add=NET_ADMIN \\\n    --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\" \\ #(12)\n    --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\" \\ #(3)\n    --device /dev/net/tun:/dev/net/tun \\ # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol> <pre><code>services:\n  app:\n    hostname: container-name.internal #(18)\n    environment:\n      - VPN_ENABLED=true #(5)\n      - VPN_CONF=wg0 #(8)\n      - VPN_PROVIDER=pia #(4)\n      - VPN_LAN_NETWORK=192.168.1.0/24 #(1)\n      - VPN_LAN_LEAK_ENABLED=false #(10)\n      - VPN_EXPOSE_PORTS_ON_LAN #(2)\n      - VPN_AUTO_PORT_FORWARD=true #(6)\n      - VPN_AUTO_PORT_FORWARD_TO_PORTS= #(15)\n      - VPN_FIREWALL_TYPE=auto #(17)\n      - VPN_HEALTHCHECK_ENABLED=false #(20)\n      - VPN_NAMESERVERS= #(16)\n      - VPN_PIA_USER #(11)\n      - VPN_PIA_PASS #(11)\n      - VPN_PIA_PREFERRED_REGION #(7)\n      - VPN_PIA_DIP_TOKEN=no #(13)\n      - VPN_PIA_PORT_FORWARD_PERSIST=false #(14)\n      - PRIVOXY_ENABLED=false #(19)\n      - UNBOUND_ENABLED=false #(21)\n      - UNBOUND_NAMESERVERS #(22)\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.conf.all.src_valid_mark=1 #(12)\n      - net.ipv6.conf.all.disable_ipv6=1 #(3)\n    devices:\n      - /dev/net/tun:/dev/net/tun # OPTIONAL(9)\n    ...\n</code></pre> <ol> <li> <p>The environment variable <code>VPN_LAN_NETWORK</code> can be set to for example <code>192.168.1.0/24</code>, <code>192.168.1.0/24,192.168.44.0/24</code> or <code>192.168.1.33</code>, so you can get access to the webui or other additional ports (see below). If for example you were to pick <code>192.168.0.0/24</code>, every device with an ip in the range <code>192.168.0.0 - 192.168.0.255</code> on your LAN is allowed access to the webui.</p> </li> <li> <p>If you need to expose ports on your LAN you can use <code>VPN_EXPOSE_PORTS_ON_LAN</code>. For example <code>VPN_EXPOSE_PORTS_ON_LAN=7878/tcp,9117/tcp</code>, will block those ports on the vpn interface, so that there's no risk that they might be exposed to the world and allow access to them from your LAN. Some images also have a <code>WEBUI_PORTS</code> environment variable that does basically the same for the vpn part. For those apps that support it, it'll also change the port on which the app runs.</p> </li> <li> <p>With <code>net.ipv6.conf.all.disable_ipv6=1</code> all ipv6 support is disabled. Leave ipv6 disabled and remove all references to it in your <code>wg0.conf</code> file to keep things simple. If you need any sort of ipv6 support, enable it with <code>net.ipv6.conf.all.disable_ipv6=0</code>. A WireGuard ipv6 endpoint is currently not supported.</p> </li> <li> <p>Possible values are <code>generic</code>, <code>proton</code> and <code>pia</code>. Affiliate links: Proton VPN Proton Mail Proton Drive Proton Pass Private Internet Access</p> </li> <li> <p>There needs to be a file <code>wg0.conf</code> located in <code>/config/wireguard</code> and you need to set the variable <code>VPN_ENABLED</code> to <code>true</code> for the VPN to start. If you'd like to execute some of your own bash commands you can place two scripts alongside your <code>wg0.conf</code>, called <code>wg0-pre.sh</code> and <code>wg0-post.sh</code>. These will execute right before the check for the existence of a <code>wg0.conf</code> file and almost at the end, right before the internet connectivity test.</p> </li> <li> <p>Auto retrieve a forwarded port and configure the supported app if set to <code>true</code> or if you can manually request/set a forwarded port in the VPN provider's web interface, fill in the port number (just the number). Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>By default a random server is used, but if you prefer a certain region you can fill in the region id. A list of available regions can be found in <code>/config/wireguard</code> after the first start. If you're seeing an error message <code>shuf: getrandom: Function not implemented</code>, you can't let it pick one randomly and are forced to fill in a region id.</p> </li> <li> <p>With <code>VPN_CONF</code> you can set the name used for your WireGuard config. This is an example of how your <code>wg0.conf</code> file should look like. If there's a lot of extra stuff, remove it unless you know what it's there for. The WireGuard config is automatically modified to use <code>AllowedIPs = 0.0.0.0/1,128.0.0.0/1</code> for compatibility with Synology/QNAP/Asustor/WSL2 systems if you append <code>-fix</code>, so <code>VPN_CONF=wg0-fix</code>. WSL2 users can also compile their own kernel if they don't wanna use this workaround. <pre><code>[Interface]\nPrivateKey = supersecretprivatekey\nAddress = xx.xx.xxx.xxx/32 # Yes, /32 in most cases\nDNS = x.x.x.x\n\n[Peer]\nPublicKey = publickey\nAllowedIPs = 0.0.0.0/0\nEndpoint = xxx.x.xxx.x:51820\n</code></pre></p> </li> <li> <p>If the WireGuard kernel module is missing (most likely on Synology/QNAP/Asustor), you can run WireGuard in userspace thanks to <code>wireguard-go</code>. For that you'll need to add the device <code>/dev/net/tun</code>. It's most likely that the device <code>/dev/net/tun</code> does not exist however, have a read here for instructions on checking and adding the device.</p> </li> <li> <p>DANGEROUS! Don't enable unless you know what you are doing!</p> </li> <li> <p>When using <code>VPN_PROVIDER=pia</code>, fill in your username and password. A <code>wg0.conf</code> will be automatically downloaded.</p> </li> <li> <p>Required in most cases, on some systems that don't have <code>rp_filter</code> set to strict, it's optional.</p> </li> <li> <p>Fill in your DIP token here, if you've bought the dedicated ip option.</p> </li> <li> <p>If you'd like to keep using the same forwarded port until it expires, set this to <code>true</code>.</p> </li> <li> <p>Adds a redirect for the forwarded port from your vpn provider to the internal port on which the app runs, ports in this list are also not blocked on the wireguard interface, so this var is also useful if you want to expose a port on both your LAN and VPN. Values like <code>32400/tcp</code> will use the port from <code>VPN_AUTO_PORT_FORWARD</code> to create the redirect or if set to <code>true</code> the forwarded port from pia/proton. Use <code>3000@3001/tcp,3002@3003/tcp</code> syntax for extra static redirects. The only known usecase as of right now is Plex and exposing it on the VPN with a non configurable forwarded port, because it's not possible to run Plex on anything else but 32400. Useful website to check for open ports is YouGetSignal and ipleak.net to leak test with <code>.torrent</code> file.</p> </li> <li> <p>Possible values are <code>wg</code>, <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>wg</code> will use the nameservers from the <code>wg0.conf</code> file. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> <li> <p>Possible values are <code>auto</code>, <code>legacy</code> or <code>nftables</code>. The default is <code>auto</code>, this will try to use the most modern method available. If this doesn't work, you can try forcing it to <code>legacy</code> or <code>nftables</code>.</p> </li> <li> <p>If you want to use container hostnames to connect to other containers within a bridge network, you'll have to use <code>--hostname</code> and use <code>container-name.internal</code> or <code>container-name.vpn</code>. Currently <code>.vpn</code> is a non existing TLD, but that can change in the future. The TLD <code>.internal</code> should become the standard for internal networks, so it's the safest choice.</p> </li> <li> <p>This will start Privoxy on the default port 8118 when set to <code>true</code>. By default Privoxy is not exposed on the LAN, so if you need that, you'll have to add <code>VPN_EXPOSE_PORTS_ON_LAN=8118/tcp,8118/udp</code>.</p> </li> <li> <p>This is almost never needed, only in very rare cases (mostly when using PIA).</p> </li> <li> <p>Enable Unbound by setting to <code>true</code> when VPN is not active.</p> </li> <li> <p>Possible values are <code>8.8.8.8</code> or <code>1.1.1.1@853#cloudflare-dns.com</code> seperated by a <code>,</code>. The value <code>8.8.8.8</code> is to use a plain old nameserver. The value <code>1.1.1.1@853#cloudflare-dns.com</code> will add a <code>DNS over TLS</code> nameserver, this will override all other regular nameservers. Leaving the variable empty will allow Unbound to work in recursive mode.</p> </li> </ol>"},{"location":"guides/torguard/","title":"Torguard","text":"<p>Here are the required steps we need to take in order to get a WireGuard <code>conf</code> file with port forwarding enabled.</p>"},{"location":"guides/torguard/#changing-service-credentials","title":"Changing Service Credentials","text":"<p>First we're going to change the default credentials under Manage Credentials. This step is optional though if you've already done it or wish to keep using the defaults.</p> <p></p> <p>Hit <code>Generate Random Login</code>. After it's done, save the credentials. We'll need them soon.</p> <p></p>"},{"location":"guides/torguard/#config-generator","title":"Config Generator","text":"<p>We'll generate a new WireGuard config on the Config Generator page. Fill in the details like shown below, use your own server preference.</p> <p></p> <p>Hit <code>Generate Config</code>. You'll get your config as seen below.</p> <p></p>"},{"location":"guides/torguard/#test-wireguard-config","title":"Test WireGuard Config","text":"<p>You can now use your created <code>conf</code> file and add it to the VPN image per the instructions. When executing the image and all went well you'll see:</p> <pre><code>[INF] [2024-03-12 07:29:51] [VPN] Performing internet connectivity test...\n[INF] [2024-03-12 07:29:51] [VPN] [IPV4] [PING: 25.167 ms] [Amsterdam, NH, The Netherlands] [UK-2 Limited] [206.217.216.28]\n</code></pre> <p>You can skip this step if you want, because later on we'll have to re-generate our <code>conf</code> file anyway. The ip we'll need later on is the WireGuard endpoint ip.</p>"},{"location":"guides/torguard/#port-forwarding","title":"Port Forwarding","text":"<p>Next we'll be getting a forwarded port. Go to <code>Services &gt; My Services</code>.</p> <p></p> <p>Then <code>Manage &gt; Port Forward Request</code>.</p> <p></p> <p>You'll see the below page, fill in the form as shown. You can pick your own port of choice. The ip is the same as shown above in our test <code>206.217.216.28</code>, usually also the same as our WireGuard endpoint.</p> <p></p> <p>Hit <code>Submit Request</code>. You'll see the following output if you scroll down.</p> <p></p>"},{"location":"guides/torguard/#re-generate-wireguard-config","title":"Re-Generate WireGuard Config","text":"<p>After having requested the port forward, we'll have to re-generate our config. Go to the Config Generator and make sure it's set like below.</p> <p></p> <p>Hit <code>Generate Config</code>. Start the VPN image with the updated <code>conf</code> file and do a port check on YouGetSignal. You'll see that our port is open and ready to receive traffic.</p> <p></p>"},{"location":"scripts/arr-discord-notifier/","title":"Arr discord notifier","text":"<p>Announcement</p> <p>Both Sonarr and Radarr now come with built-in Discord notifications based on this script, so it's no longer bundled with those images. The script still works though if you prefer to use it.</p> <p> GitHub </p> <p>Arr Discord Notifier sends pretty notifications to a discord webhook. The Radarr and Sonarr v3 (only v3 is supported) docker images come bundled with this script, but it can also be used on its own.</p>"},{"location":"scripts/arr-discord-notifier/#configuration","title":"Configuration","text":"<p>Add a <code>Custom Script</code> to the <code>Connect</code> settings in Sonarr/Radarr as seen below.  </p> <p></p> <p>Then add the environment variable <code>DISCORD_WEBHOOK</code> with your webhook url provided by Discord to the container. After that hit the <code>Test</code> button and you should see a notification appear in your discord channel.  </p> <p>If you also configure the environment variable <code>TMDB_API_KEY</code>, when possible it will use an episode still as a backdrop image and add a <code>Cast</code> field.</p> <p>If you want to hide some fields, you can use <code>DROP_FIELDS=\"backdrop overview release airdate\"</code> as a variable, all field names in lowercase, <code>backdrop</code> and <code>poster</code> are valid values too.</p> <p>Sending to multiple webhooks can be done with additional variables like <code>DISCORD_WEBHOOK_0</code> and <code>DROP_FIELDS_0</code>.</p> <p>By default the hostname is used as the Author of the notification, you can modify this by changing the hostname or the variable <code>AUTHOR_NAME</code>.</p>"},{"location":"scripts/arr-discord-notifier/#sample-images","title":"Sample images","text":""},{"location":"scripts/pullio/","title":"Pullio","text":"<p> GitHub </p> <p>Updating your docker containers the easy way.</p> <p>Pullio is a bash script that you execute with cron, jobber, a systemd timer or any other way that you prefer, it then does a <code>docker-compose pull</code> for all the containers configured to have notifications or updates enabled. It then checks if there's an update available and takes action according to your configuration. As you might have already guessed it, this script relies on docker-compose to do the heavy lifting and thus is only compatible with docker-compose managed containers.</p> <p>Features:</p> <ul> <li>Discord notifications (see below for preview)</li> <li>No notifications if you leave the webhook out, it'll run as an updater and script executer</li> <li>Detailed info about what has changed for images that follow the Opencontainers Annotation Keys</li> <li>Execute script before sending notification</li> <li>Execute script before updating container, after container is stopped</li> <li>Private registries</li> <li>With <code>--tag</code> you can use seperate configs for hourly \"Update available\" notifications and on a daily schedule actually apply the updates</li> </ul>"},{"location":"scripts/pullio/#installation","title":"Installation","text":"<pre><code>sudo curl -fsSL \"https://raw.githubusercontent.com/hotio/pullio/master/pullio.sh\" -o /usr/local/bin/pullio\nsudo chmod +x /usr/local/bin/pullio\n</code></pre> <p>Now execute it however and whenever you want.</p>"},{"location":"scripts/pullio/#configuration","title":"Configuration","text":"<p>You configure the script its behaviour by adding one or more of the following labels to your <code>docker-compose.yml</code> for every container you want. Adding no discord webhook will disable the notifications.</p> <pre><code>...\nlabels:\n  - \"org.hotio.pullio.notify=true\"\n  - \"org.hotio.pullio.update=true\"\n  - \"org.hotio.pullio.discord.webhook=https://discord.com/api/webhooks/...\"\n  - \"org.hotio.pullio.generic.webhook=https://some.domain.com/api/webhooks/...\"\n  - \"org.hotio.pullio.author.avatar=https://domain.com/logo.png\"\n  - \"org.hotio.pullio.script.notify=bash /notify-script.sh\"\n  - \"org.hotio.pullio.script.update=bash /update-script.sh\"\n  - \"org.hotio.pullio.registry.authfile=/authfile.txt\"\n</code></pre> <p>Using <code>--tag mytag</code>, would let you do the following.</p> <pre><code>...\nlabels:\n  - \"org.hotio.pullio.mytag.notify=true\"\n  - \"org.hotio.pullio.mytag.discord.webhook=https://discord.com/api/webhooks/...\"\n</code></pre> <p>If you need to provide credentials for a Private Registry, this file's content needs to be as shown below.</p> <pre><code>{\n  \"registry\": \"ghcr.io\",\n  \"username\": \"your_username\",\n  \"password\": \"your_password\"\n}\n</code></pre>"},{"location":"scripts/pullio/#troubleshooting","title":"Troubleshooting","text":"<p>It can be frustrating to test the script if no docker image updates are available, for that you can do <code>./pullio.sh --debug</code> and the script will behave as if an update is available.</p>"},{"location":"scripts/pullio/#notification-preview","title":"Notification preview","text":""}]}